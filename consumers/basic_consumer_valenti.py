"""
basic_consumer_case.py

Read a log file as it is being written. 
"""

#####################################
# Import Modules
#####################################

# Import packages from Python Standard Library
import os
import time

# Import functions from local modules
from utils.utils_logger import logger, get_log_file_path

#####################################
# Define a function to process a single message
#####################################


def process_message(log_file) -> None:
    """
    Read a log file and process each message.

    Args:
        log_file (str): The path to the log file to read.
    """
    processed_messages = set()  # Set to track messages we've already processed

    with open(log_file, "r") as file:
        # Move to the end of the file
        file.seek(0, os.SEEK_END)
        print("Consumer is ready and waiting for a new log message...")

        # Use while True loop so the consumer keeps running forever
        while True:

            # Read the next line of the file
            line = file.readline()

            # If the line is empty, wait for a new log entry
            if not line:
                # Wait 10 seconds for a new log entry
                delay_seconds = 10
                time.sleep(delay_seconds)
                # Keep checking for new log entries
                continue

            # We got a new log entry!
            # Remove any leading/trailing white space and log the message
            message = line.strip()

            # Check if the message has already been processed
            if message in processed_messages:
                continue  # Skip processing if it's already in the set

            # Mark this message as processed
            processed_messages.add(message)
            print(f"Consumed log message: {message}")

            # monitor and alert on special conditions - waterpark
            if "extremely dissatisfied" in message and "Waterpark" in message:
                print(f"ALERT: NEGATIVE SURVEY - \n{message}")
                logger.warning(f"ALERT: NEGATIVE SURVEY - \n{message}")

            # monitor and alert on special conditions - giftshop
            if "extremely dissatisfied" in message and "Giftshop" in message:
                print(f"ALERT: NEGATIVE SURVEY - \n{message}")
                logger.warning(f"ALERT: NEGATIVE SURVEY - \n{message}")

            # monitor and alert on special conditions - arcade
            if "extremely dissatisfied" in message and "Northerlights Arcade" in message:
                print(f"ALERT: NEGATIVE SURVEY - \n{message}")
                logger.warning(f"ALERT: NEGATIVE SURVEY - \n{message}")

            # monitor and alert on special conditions - cafe
            if "extremely dissatisfied" in message and "Critter Cafe" in message:
                print(f"ALERT: NEGATIVE SURVEY - \n{message}")
                logger.warning(f"ALERT: NEGATIVE SURVEY - \n{message}")

#####################################
# Define main function for this script.
#####################################


def main() -> None:
    """Main entry point."""

    logger.info("START...")

    # Call the function we imported from utils/utils_logger module
    # to get the path to the log file being generated by the producer.
    # Assign the return value to a local variable.
    log_file_path = get_log_file_path()
    logger.info(f"Reading file located at {log_file_path}.")

    try:
        # Try to call the process_message function with the log file path
        # as an argument. We know things will go wrong
        # eventually when the user stops the process, so we use a try block.
        process_message(log_file_path)

    except KeyboardInterrupt:
        print("User stopped the process.")

    logger.info("END.....")


#####################################
# Conditional Execution
#####################################

# If this file is the one being executed, call the main() function
if __name__ == "__main__":
    main()
